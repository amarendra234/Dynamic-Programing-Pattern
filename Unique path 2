class Solution {
public:
    int all_path(vector<vector<int>>&obstacleGrid,int n,int m,int i,int j,vector<vector<int>>&dp){
        if(i==n-1 and j==m-1 and obstacleGrid[i][j]==0){
            return 1;
        }
        if(i>=n or j>=m or obstacleGrid[i][j]==1){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j]=all_path(obstacleGrid,n,m,i+1,j,dp)+all_path(obstacleGrid,n,m,i,j+1,dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        // vector<vector<int>>dp(n,vector<int>(m,-1));
     
        // return all_path(obstacleGrid,n,m,0,0,dp);
        int dp[n][m];
        int obs=INT_MAX;
        for(int i=0;i<m;i++){
              if(obstacleGrid[0][i]==1){
                obs=i;
                break;
              }
        }
        for(int i=0;i<m;i++){
            if(i>=obs){
                dp[0][i]=0;
            }else{
                dp[0][i]=1;
            }
        }
        obs=INT_MAX;
        for(int i=0;i<n;i++){
            if(obstacleGrid[i][0]==1){
                obs=i;
                break;
            }
        }
        for(int i=0;i<n;i++){
            if(i>=obs){
                dp[i][0]=0;
            }else{
                dp[i][0]=1;
            }
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                    continue;
                }else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[n-1][m-1];

    }
};
