//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int max_profit(int n,int w,int val[],int wt[],vector<vector<int>>&dp){
        if(w==0 or n==0){
            return 0;
        }
        if(dp[n][w]!=-1){
            return dp[n][w];
        }
        if(wt[n-1]>w){
            return dp[n][w]=max_profit(n-1,w,val,wt,dp);
        }else{
            int include=max_profit(n,w-wt[n-1],val,wt,dp)+val[n-1];
            int not_include=max_profit(n-1,w,val,wt,dp);
            return dp[n][w]= max(include,not_include);
        }
    }
    int knapSack(int N, int W, int val[], int wt[])
    {
        // // code here
        // vector<vector<int>>dp(N+1,vector<int>(W+1,-1));
        // return max_profit(N,W,val,wt,dp);
        int dp[N+1][W+1];
        for(int i=0;i<=N;i++){
            for(int j=0;j<=W;j++){
                if(i==0 or j==0){
                    dp[i][j]=0;
                }
            }
        }
        for(int i=1;i<=N;i++){
            for(int j=1;j<=W;j++){
                if(wt[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-wt[i-1]]+val[i-1]);
                }
            }
        }
        return dp[N][W];
    }
};
