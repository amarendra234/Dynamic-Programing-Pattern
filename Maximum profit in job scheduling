class Solution {
public:
int getnext(vector<pair<int,pair<int,int>>>&v,int start,int target){
       int end=v.size()-1;
       int index=v.size();
       while(start<=end){
           int mid=start+(end-start)/2;
           if(v[mid].first>=target){
               index=mid;
               end--;
           }else{
              start++;
           }
       }
       return index;
}
    int max_profit( vector<pair<int,pair<int,int>>>&v,int index,vector<int>&dp){
        if(index>=v.size()){
            return 0;
        }
        //checking it's valid range or not if valid we have two option either take or not
      
        int getnextid=getnext(v,index+1,v[index].second.first);
            // include it
              if(dp[index]!=-1){
            return dp[index];
        }
            int include=v[index].second.second+max_profit(v,getnextid,dp);
            // exclude it
            int exclude=max_profit(v,index+1,dp);
            return dp[index]=max(include,exclude);

     
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        vector<pair<int,pair<int,int>>>v;
        for(int i=0;i<startTime.size();i++){
            v.push_back({startTime[i],{endTime[i],profit[i]}});
        }
        sort(v.begin(),v.end());
        vector<int>dp(startTime.size()+1,-1);
        return max_profit(v,0,dp);
    }
};
