/**********************************************************************Recursive Code**********************************************************************/
class Solution {
public:
    int min_value(vector<int>days,vector<int>costs,int i){
        if(i==days.size()){
            return 0;
        }
        // if purchase for one day pass
        int one_day=costs[0]+min_value(days,costs,i+1);
        // if purchase for 7 days
        int j = i;
        while (j < days.size() && days[j] < days[i] + 7) {
            j++;
        }
        int seven_day=costs[1]+min_value(days,costs,j);
     j = i;
        while (j < days.size() && days[j] < days[i] + 30) {
            j++;
        }
        int thirt_day=costs[2]+min_value(days,costs,j);
        int ans1=min(one_day,seven_day);
        return min(ans1,thirt_day);
    }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        return min_value(days,costs,0);
    }
};




/**********************************************************************Memoization Dp Code/**********************************************************************/
int min_value(vector<int>days,vector<int>costs,int i,int dp[]){
        if(i==days.size()){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        // if purchase for one day pass
        int one_day=costs[0]+min_value(days,costs,i+1,dp);
        // if purchase for 7 days
        int j = i;
        while (j < days.size() && days[j] < days[i] + 7) {
            j++;
        }
        int seven_day=costs[1]+min_value(days,costs,j,dp);
     j = i;
        while (j < days.size() && days[j] < days[i] + 30) {
            j++;
        }
        int thirt_day=costs[2]+min_value(days,costs,j,dp);
        int ans1=min(one_day,seven_day);
        return dp[i]=min(ans1,thirt_day);
    }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int dp[days.size()];
        for(int i=0;i<days.size();i++){
            dp[i]=-1;
        }
        return min_value(days,costs,0,dp);
    }
