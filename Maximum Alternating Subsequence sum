class Solution {
public:
    long long int solve(vector<int>&nums,int index,int flag,vector<vector<long long>>&dp){
        if(index==nums.size()){
            return 0;
        }
        if(dp[index][flag]!=-1){
            return dp[index][flag];
        }
        long long int skip=solve(nums,index+1,flag,dp);
        // include
        long long int val=nums[index];
        if(!flag){
            val=-val;
        }
        long long int include=val+solve(nums,index+1,!flag,dp);
        return dp[index][flag]=max(skip,include);
    }
    long long maxAlternatingSum(vector<int>& nums) {
      //vector<vector<long long>> dp(nums.size() + 1, vector<long long>(2, -1));
         long long dp[nums.size()+1][2];
         dp[0][0]=0;
         dp[0][1]=0;
         for(int i=1;i<=nums.size();i++){
            dp[i][0]=max(dp[i-1][1]-nums[i-1],dp[i-1][0]);
            dp[i][1]=max(dp[i-1][0]+nums[i-1],dp[i-1][1]);
         }
        return max(dp[nums.size()][0],dp[nums.size()][1]);
    }
};
