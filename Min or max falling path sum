class Solution {
public:
    int min_sum(vector<vector<int>>&matrix,int i,int j,vector<vector<int>>dp){
        if(j<0 or j>=matrix.size()){
            return 1e8;
        }
        if(i==0){
            return matrix[0][j];
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int left=matrix[i][j]+min_sum(matrix,i-1,j-1,dp);
        int down=matrix[i][j]+min_sum(matrix,i-1,j,dp);
        int right=matrix[i][j]+min_sum(matrix,i-1,j+1,dp);
        return dp[i][j]=min({left,down,right});
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int dp[n][n];
        // int m=INT_MAX;
        // vector<vector<int>>dp(n,vector<int>(n,-1));
        // for(int i=0;i<n;i++){
        //     m=min(m,min_sum(matrix,n-1,i,dp));
        // }
        for(int i=0;i<n;i++){
            dp[n-1][i]=matrix[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                dp[i][j]=INT_MAX;
                if(j+1<=n-1){
                   dp[i][j]=min(dp[i+1][j+1]+matrix[i][j],dp[i][j]);
                }
                dp[i][j]=min(dp[i+1][j]+matrix[i][j],dp[i][j]);
                if(j-1>=0){
                     dp[i][j]=min(dp[i+1][j-1]+matrix[i][j],dp[i][j]);
                }
                
            }
        }
        int m=INT_MAX;
        for(int i=0;i<n;i++){
            m=min(m,dp[0][i]);
        }
        return m;
    }
};
