class Solution{   
public:
    bool find_sum(vector<int>arr,int sum,int n,vector<vector<int>>&dp){
         if(sum==0){
            return true;
        }
        if(n<=0 or sum<0){
            return false;
        }
       
        if(dp[n][sum]!=-1){
            return dp[n][sum];
        }
        return dp[n][sum]=find_sum(arr,sum-arr[n-1],n-1,dp)|| find_sum(arr,sum,n-1,dp);
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        int len=arr.size();
        int dp[len+1][sum+1];
        for(int i=0;i<=sum;i++){
            dp[0][i]=0;
        }
        for(int i=0;i<=len;i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=len;i++){
            for(int j=1;j<=sum;j++){
                if(arr[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }else{
                    dp[i][j]=max(dp[i-1][j],dp[i-1][j-arr[i-1]]);
                }
            }
        }
        return dp[len][sum];
       // return ans;
    }
};
