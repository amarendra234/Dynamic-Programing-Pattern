/*********************************************************************************Recursive*********************************************************************************/
class Solution {
public:
    int path_sum(vector<vector<int>>& grid,int i,int j,int row,int col){
        if(i==row-1 and j==col-1){
             grid[i][j];
        }
        if(i>=row || j>=col){
            return INT_MAX;
        }
     
        returngrid[i][j]+min(path_sum(grid,i+1,j,row,col),path_sum(grid,i,j+1,row,col));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
         int ans=path_sum(grid,0,0,row,col);
        return ans;
    }
};


/*********************************************************************************Memozation*********************************************************************************/
class Solution {
public:
    int path_sum(vector<vector<int>>& grid,int i,int j,int row,int col,vector<vector<int>>dp){
        if(i==row-1 and j==col-1){
             return dp[i][j]=grid[i][j];
        }
        if(i>=row || j>=col){
            return INT_MAX;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j]=grid[i][j]+min(path_sum(grid,i+1,j,row,col,dp),path_sum(grid,i,j+1,row,col,dp));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int sum;
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<int>>dp(row,vector<int>(col,-1));
         int ans=path_sum(grid,0,0,row,col,dp);
        return ans;
    }
};



/*********************************************************************************Top Down Dp*********************************************************************************/
class Solution {
public:
    int path_sum(vector<vector<int>>& grid,int i,int j,int row,int col,vector<vector<int>>dp){
        if(i==row-1 and j==col-1){
             return dp[i][j]=grid[i][j];
        }
        if(i>=row || j>=col){
            return INT_MAX;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j]=grid[i][j]+min(path_sum(grid,i+1,j,row,col,dp),path_sum(grid,i,j+1,row,col,dp));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int sum;
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<int>>dp(row,vector<int>(col,-1));
        dp[0][0]=grid[0][0];
         for(int i=1;i<row;i++){
            dp[i][0]=dp[i-1][0]+grid[i][0];
         }
         for(int i=1;i<col;i++){
            dp[0][i]=dp[0][i-1]+grid[0][i];
         }
         for(int i=1;i<row;i++){
            for(int j=1;j<col;j++){
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
            }
         }
        return dp[row-1][col-1];
    }
};
